(function(b,c){var j=String.fromCharCode,h=true,d=false;function e(k,l){return l?j(k&255)+e(k>>8,l-1):""}function g(k,l){return l?g(k>>8,l-1)+j(255-k&255):""}function i(k,l,m){return m?g(k,l):e(k,l)}function a(r,q){var k=r.length,p=k-1,s=0,o=c.pow,m;if(q){for(m=0;m<k;m++){s+=(255-r.charCodeAt(m))*o(256,p-m)}}else{for(m=0;m<k;m++){s+=r.charCodeAt(m)*o(256,m)}}return s}function f(n,t,o,w){var s=c.pow,r=c.floor,l=f.convertFromBinary,u=f.convertToBinary,k=n/8,q=s(2,n),v=q/2,x=v-1,p=1/v,m=1/x;return w?o?t?function(y,z){y=r(y<0?y*v+q:y*x);return u(y,k,z)}:function(y,z){return u(r(y*x),k,z)}:t?function(y,z){return u(y<0?y+q:y,k,z)}:function(y,z){return u(y,k,z)}:o?t?function(A,z){var y=l(A,z);return y>x?(y-q)*p:y*m}:function(z,y){return l(z,y)*m}:t?function(A,z){var y=l(A,z);return y>x?y-q:y}:function(z,y){return l(z,y)}}f.convertToBinary=i;f.convertFromBinary=a;f.fromQ32=f(32,h,h,h);f.toQ32=f(32,h,h,d);f.fromInt32=f(32,h,d,h);f.toInt32=f(32,h,d,d);f.fromInt16=f(16,h,d,h);f.toInt16=f(16,h,d,d);f.fromInt8=f(8,h,d,h);f.toInt8=f(8,h,d,d);f.fromUint32=f(32,d,d,h);f.toUint32=f(32,d,d,d);f.fromUint16=f(16,d,d,h);f.toUint16=f(16,d,d,d);f.fromUint8=f(8,d,d,h);f.toUint8=f(8,d,d,d);b.Binary=f}(this,Math));function BitString(a,b){this.pattern=a,this.recursive=!1,this.options=b||{bytes:!0,bigEndian:!1},this.names=[],this.offsets=[],this.sizes=[],this.types=[],this.values={},this.compiled=!1}var util,Binary;typeof module!="undefined"&&(util=require("util"),Binary=require("../lib/binary").Binary),BitString.validate=function(a){var b=typeof a;if(b!=="string")throw new Error("BitString: only binary strings are supported");return b},BitString.types={"byte":1,"char":1,"short":2,"int":4,"float":4,fn:{}},BitString.ext=function(a){return BitString.types.fn[a]},BitString.parseArray=function(a,b,c){var d=[],e=BitString.types[a];for(var f=-1*e,g=0;(f+=e)+e<b.length;++g)d[g]=c(b.substring(f,f+e));return d},BitString.convert=function(a,b,c){c.bigEndian=!!c.bigEndian,c.array=!!c.array,c.number=a=="short"||a=="int"||c.number;var d=a=="int"?Binary.toInt32:a=="short"?Binary.toInt16:a=="byte"?Binary.toUint8:null;return c.array&&c.number?BitString.parseArray(a,b,d):d?d(b.toString(),c.bigEndian):BitString.ext(a)?BitString.ext(a).onchunk(b):b},BitString.prototype.sizeOf=function(a){var b=parseInt(a);if(!isNaN(b))return{name:"byte",size:b};if(a[0]=="!")return{name:"char",size:a.substr(1),ref:!0};var c=a.replace(")","").split("("),d=c[0],e,f=c[1],g,h=!1;return e=parseInt(f)>1,f==""&&(c[1]=-1),f!=""&&!e&&(c[1]=1),b=parseInt(c[1])||c[0],(h=BitString.ext(c[0]))!==undefined&&(g=f.split(",")),h&&(b=h.oncompile(g)),{name:c[0],size:b}},BitString.prototype.compile=function(){var a=this.pattern.split(";"),b,c,d=0;for(var e=-1,f=a.length;++e<f;){a[e]=a[e].trim();if(a[e]=="::"||a[e]=="")break;if(a[e]=="::R"||a[e]==""){this.recursive=!0;break}var b,g,h;b=a[e].split(":");if(b.length>0){h=this.sizeOf(b[0]),this.offsets[e]=d,this.names[e]=b[1],this.types[e]=h.name,this.sizes[e]=h.size,d+=h.ref?0:h.size*BitString.types[h.name];continue}if(!a[e][0]=="?")continue;b=a[e].substr(1).split("==");var i=b[0],j=b[1]}return this.compiled=!0,d},BitString.prototype.eval=function(expr,ctx){var _expr=expr,operands=expr.replace(/[()]|[*]|[+]|[-]|[\/]/g," ").trim().replace(/[ ]+/g," ").split(" ");if(operands.length==1)return ctx[expr];for(var i=-1;++i<operands.length;){var opnd=operands[i];ctx[opnd]&&(_expr=_expr.replace(opnd,'ctx["'+opnd+'"]'))}return eval(_expr)},BitString.prototype.nextChunk=function(a,b,c,d){var e=this.options.bytes==1;if(e&&d=="string")return a.substring(b,c);if(e&&d=="arraybuffer")return a.subarray(b,c)},BitString.prototype.pack=function(a){throw new Error("Not yet implemented")},BitString.prototype.unpack=function(a){var b=0,c=0,d,e;!this.compiled&&(d=this.compile()),e=BitString.validate(a);var f=[],g={};while(this.recursive&&b<a.length||b==0){g={};for(var h=-1,i=this.offsets.length;++h<i;){var j=this.sizes[h],k=l=="byte"&&(j==-1||j>0);j==-1&&(j=a.length-this.offsets[h]),typeof j=="string"&&(j=this.eval(j,g));var l=this.types[h],m=this.names[h],n=b+this.offsets[h],o=n+j*BitString.types[l],p=this.nextChunk(a,n,o,e),q=this;g[m]=BitString.convert(l,p,{bigEndian:q.options.bigEndian,array:k}),c=o}f.push(g),b=c}return this.recursive||(f=g),f},typeof module!="undefined"&&(exports.version="0.0.1",exports.BitString=BitString);